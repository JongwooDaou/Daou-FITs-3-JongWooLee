--1. 지점별 승인된 대출의 총 금액을 계산, 비교
SELECT NAME, SUM_AMOUNT, ROUND(AVG_AMOUNT,2)
FROM (
SELECT DISTINCT BRANCH_ID, 
    SUM(L.AMOUNT) OVER(PARTITION BY BRANCH_ID) AS SUM_AMOUNT,
    AVG(L.AMOUNT) OVER() AS AVG_AMOUNT
FROM LOANS L
WHERE STATUS = 'APPROVED' 
) A
JOIN BRANCHES B ON A.BRANCH_ID = B.BRANCH_ID
WHERE A.SUM_AMOUNT < AVG_AMOUNT;

--2.모든 직원의 사번과 이름/상사 이름과 상사의 부서
 
SELECT E1.EMPLOYEE_ID,
    E1.NAME,
    NVL(E2.NAME, 'NO MANAGER') MANAGER_NAME,
    CASE
        WHEN E2.EMPLOYEE_ID IS NULL THEN 'NO MANAGER'
        WHEN E2.DEPARTMENT_ID IS NULL THEN 'NO DEPARTMENT'
        ELSE (SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE DEPARTMENT_ID = E2.DEPARTMENT_ID)
    END AS MANAGER_DEPT
FROM EMPLOYEES E1
LEFT OUTER JOIN EMPLOYEES E2
ON E1.MANAGER_ID = E2.EMPLOYEE_ID 
ORDER BY E1.EMPLOYEE_ID;

--3. 직원의 급여가 총 급여에 차지하는 비율

SELECT E1.EMPLOYEE_ID,
    NAME,
    SALARY,
    ROUND(( SALARY / SUM(SALARY) OVER() * 100),2) RATIO
FROM EMPLOYEES E1
WHERE SALARY IS NOT NULL
ORDER BY RATIO DESC;

SELECT EMPLOYEE_ID,
    NAME,
    SALARY,
    ROUND(RATIO,2),
    SUM(RATIO) OVER(ORDER BY RATIO DESC ROWS UNBOUNDED PRECEDING)
FROM(
SELECT E1.EMPLOYEE_ID,
    NAME,
    SALARY,
    ( SALARY / SUM(SALARY) OVER() * 100 ) RATIO
FROM EMPLOYEES E1
WHERE SALARY IS NOT NULL
ORDER BY RATIO DESC
);

--4. 상위 5개 거래 계좌
SELECT *
FROM (
    SELECT 
        ACCOUNT_ID,
        MAX(AMOUNT) AS MAX_AMOUNT,
        DENSE_RANK() OVER(ORDER BY MAX(AMOUNT) DESC) AS RANK
    FROM TRANSACTIONS
    GROUP BY ACCOUNT_ID
) T
WHERE RANK <= 5;


--5.부서별 최고급여 최저급여 차이
SELECT DEPARTMENT_ID, (MAX(SALARY) - MIN(SALARY)) SAL_DIFF
FROM EMPLOYEES
WHERE DEPARTMENT_ID IS NOT NULL
GROUP BY DEPARTMENT_ID
ORDER BY DEPARTMENT_ID;

--6. 직원 급여와 부서 평균 급여의 차이

SELECT EMPLOYEE_ID, NAME, SALARY,
    ROUND(AVG(SALARY) OVER(PARTITION BY DEPARTMENT_ID),0) AVG_DEPT_SAL,
    ROUND((SALARY - AVG(SALARY) OVER(PARTITION BY DEPARTMENT_ID)), 0) SAL_DIFF
FROM EMPLOYEES E1
WHERE SALARY IS NOT NULL AND DEPARTMENT_ID IS NOT NULL;

--7. Employee 24 직원의 상사 모두 표시
SELECT 
    LTRIM(SYS_CONNECT_BY_PATH(NAME, '>'), '>') AS PATH
FROM EMPLOYEES E
WHERE MANAGER_ID IS NULL
START WITH NAME = 'Employee 241'
CONNECT BY  EMPLOYEE_ID = PRIOR MANAGER_ID;

--8. 급여, 이름 순으로10명
SELECT * 
FROM(
SELECT NAME, SALARY, ROW_NUMBER() OVER(ORDER BY SALARY DESC NULLS LAST, NAME) RANK
FROM EMPLOYEES E1
)
WHERE RANK <= 10;

--9. 연도별 급여 합계
SELECT NVL(TO_CHAR(HIRE_DATE, 'YYYY'), 'ALL YEARS') YEAR, SUM(SALARY) SUM_SAL
FROM EMPLOYEES E
GROUP BY ROLLUP(TO_CHAR(HIRE_DATE, 'YYYY'))
ORDER BY YEAR;

--10. 부서별 급여합계, 직무별 급여합계, 총 급여 합계
SELECT NVL((SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE E.DEPARTMENT_ID = DEPARTMENT_ID), '====') DEPT_NAME,
    NVL(JOB_ID,'===='),
    SUM(SALARY)
FROM EMPLOYEES E
WHERE DEPARTMENT_ID IS NOT NULL
GROUP BY GROUPING SETS(DEPARTMENT_ID, JOB_ID,())
ORDER BY DEPARTMENT_ID,JOB_ID;

SELECT NVL((SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE E.DEPARTMENT_ID = DEPARTMENT_ID), '====') DEPT_NAME,
    CASE
        WHEN (SELECT DEPARTMENT_NAME FROM DEPARTMENTS WHERE E.DEPARTMENT_ID = DEPARTMENT_ID) IS NULL AND JOB_ID IS NULL THEN 'TOTAL'
        WHEN JOB_ID IS NULL THEN '===='
    ELSE JOB_ID
    END AS JOB_ID,
    SUM(SALARY)
FROM EMPLOYEES E
WHERE DEPARTMENT_ID IS NOT NULL
GROUP BY GROUPING SETS(DEPARTMENT_ID, JOB_ID,())
ORDER BY DEPARTMENT_ID,JOB_ID;

--11. 부서별 직원 급여 합계( 직원 급여 +-100 범위 급여 합산)
SELECT DEPARTMENT_ID, NAME, SALARY,
    SUM(SALARY) OVER(PARTITION BY DEPARTMENT_ID ORDER BY SALARY RANGE BETWEEN 100 PRECEDING AND 100 FOLLOWING) SUM_SAL
FROM EMPLOYEES E;

--12. 직원 개개인의 급여와 직무별 평균 급여와 총 급여를 비교
SELECT EMPLOYEE_ID, JOB_ID,  SALARY, ROUND(JOB_AVG_SAL) JOB_AVG_SAL,
    CASE 
        WHEN JOB_AVG_SAL <= SALARY THEN '직무 평균 이상'
        ELSE '직무 평균 이하'
    END A,
    ROUND(TOTAL_AVG_SAL) TOTAL_AVG_SAL,
    CASE 
        WHEN TOTAL_AVG_SAL <= SALARY THEN '전체 평균 이상'
        ELSE '전체 평균 이하'
    END B
FROM(
SELECT EMPLOYEE_ID, JOB_ID,
    AVG(SALARY) OVER(PARTITION BY JOB_ID) JOB_AVG_SAL,
    AVG(SALARY) OVER () TOTAL_AVG_SAL,
    SALARY
FROM EMPLOYEES E)
WHERE SALARY IS NOT NULL;
